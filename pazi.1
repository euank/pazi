.\" Automatically generated by Pandoc 2.9.2
.\"
.TH "PAZI" "1" "" "Version 0.4.1" "An autojump \[lq]zap to directory\[rq] helper"
.hy
.SH SYNOPSIS
.PP
A fast autojump tool
.PP
USAGE: pazi [FLAGS] [OPTIONS] [SUBCOMMAND]
.PP
FLAGS: -h, \[en]help Prints help information -i, \[en]interactive
interactively search directory matches -V, \[en]version Prints version
information
.PP
OPTIONS: \[en]debug print debug information to stderr [env: PAZI_DEBUG=]
.PP
SUBCOMMANDS: edit Edit the frecency database help Prints this message or
the help of the given subcommand(s) import Import from another autojump
program init Prints initialization logic for the given shell to eval
view View the frecency database
.SH DESCRIPTION
.PP
Pazi is an autojump utility.
That is to say, pazi remembers visited directories in the past and makes
it easier to get back to them.
.PP
There are several autojump utilities, including fasd (or a better
maintained fork), z, and autojump.
This implementation aims to be faster than any of the others (in no
small part due to being in Rust), and also safer than \f[C]fasd\f[R] and
\f[C]z\f[R] which, being shell-parsers written entirely in shell, are
tricky to get right.
.SH SETUP
.PP
After the pazi binary is in your \f[C]$PATH\f[R], add the following to
your \f[C].zshrc\f[R] or \f[C].bashrc\f[R]:
.IP
.nf
\f[C]
if command -v pazi &>/dev/null; then
  eval \[dq]$(pazi init zsh)\[dq] # or \[aq]bash\[aq]
fi
\f[R]
.fi
.PP
Note: The init should be added after
\f[C]autoload -Uz compinit; compinit;\f[R] has been called since
\f[C]pazi init zsh\f[R] initializes completion for the \f[C]z\f[R]
command.
.PP
Or if you are a fish user, add the following to your
\f[C]config.fish\f[R]
.IP
.nf
\f[C]
if command -v pazi >/dev/null
  status --is-interactive; and pazi init fish | source
end
\f[R]
.fi
.PP
Finally, re-launch the shell and start zapping around :)
.SH PIPING
.PP
Pazi provides the \f[C]--pipe\f[R] option to allow filtering potential
jump targets through a program prior to being jumped to.
.PP
The main use-case for this feature is integration with fuzzy-finders
like \f[C]fzf\f[R] and \f[C]skim\f[R].
.PP
\f[C]z --pipe=\[dq]fzf\[dq] foo\f[R] may be used to filter all results
matching \f[C]z foo\f[R] further before jumping.
.PP
You may wish to make an alias, such as
\f[C]alias zf=\[aq]z --pipe=\[dq]fzf\[dq]\[aq]\f[R], for ease of use.
.PP
The program passed to \f[C]--pipe\f[R] should behave as follows:
.IP "1." 3
It should accept a list of newline separated strings on stdin.
.IP "2." 3
It should return one or more of the strings passed into it on stdout.
.IP "3." 3
It should exit 0 on success.
.PP
Examples of programs that may be used as pipe programs include
\f[C]fzf\f[R], \f[C]sk\f[R], \f[C]head\f[R], \f[C]sort -R\f[R], and so
on.
.SH BUGS
.PP
See GitHub Issues: https://github.com/euank/pazi/issues
.SH AUTHOR
.PP
Euan Kemp <euank@euank.com>
